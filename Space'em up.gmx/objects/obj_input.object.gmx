<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprt_cmd</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialisation de l'objet

caret_flash = 0
caret_flash_rate = 15
caret_move = 0
caret_move_rate = 7
text = "" // current text
caret = 0 // caret position
fillchar = "`" // used as filler character in input handling.
filltext = string_repeat(fillchar, 10)
keyboard_string = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Récupération du texte

// keyboard shortcuts:
caret_move = max(0, caret_move - 1)
if (keyboard_check(vk_left) != keyboard_check(vk_right)) {
    if (caret_move == 0) {
        if (keyboard_check(vk_left)) {
            if (caret &gt; 0) caret -= 1
        } else {
            if (caret &lt; string_length(text)) caret += 1
        }
        caret_move = caret_move_rate
    }
} else caret_move = 0
if (keyboard_check_pressed(vk_home)) caret = 0
if (keyboard_check_pressed(vk_end)) caret = string_length(text)
if (keyboard_check_pressed(vk_delete)) {
    text = string_delete(text, caret + 1, 1)
}
// actual input:
if (keyboard_string != filltext &amp;&amp; keyboard_string != "") {
    var n, l, t;
    t = keyboard_string
    l = string_length(t)
    n = 1
    // find where actual input starts
    while ((n &lt;= l) &amp;&amp; (string_char_at(t, n) == fillchar)) n += 1
    c = 11 - n
    if (c &gt; 0 &amp;&amp; caret &gt; 0) {
        caret -= c
        text = string_delete(text, caret + 1, c)
    }
    c = l - n + 1
    if (c &gt; 0) {
        text = string_insert(string_copy(t, n, c), text, caret + 1)
        caret += c
    }
}
keyboard_string = filltext
caret = max(0, min(caret, string_length(text)))

//Quand l'utilisateur appui sur entré envoie le text au processor et détruit l'objet
if (keyboard_check_pressed(vk_enter)){
    debug_processor(text);
    consoleDebug = false;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Affichage du texte

draw_set_font(arial_20)
draw_set_color(make_color_rgb(163, 166, 204))
var i, h, ptext;
// sad truth: There is no way you can display the typed "#"
// characters and get string width of those.
ptext = string_replace_all(text, '#', '�')
draw_text(x, y, ptext)
// add those useless fancy lines below the input:
i = string_width(string_copy(ptext, 1, caret))
h = string_height('\\')
draw_line(x + i, y, x + i, y + h)
i = string_width(text)
draw_line(x - 3, y + h + 2, x + i + 2, y + h + 2)
draw_line(x - 3, y + h + 4, x + i + 10, y + h + 4)
// key handling:
if (keyboard_check_pressed(vk_enter)) {
    with (obj_log) {
        for (i = length - 1; i &gt;= 0; i -= 1) text[i + 1] = text[i]
        length = min(maxlength, length + 1)
        text[0] = ptext
    }
    text = ''
    caret = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
